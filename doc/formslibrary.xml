<?xml version="1.0" encoding="UTF-8"?>
<keywordspec generated="20161020 11:11:50" type="library" name="FormsLibrary" format="ROBOT">
<version></version>
<scope>global</scope>
<namedargs>yes</namedargs>
<doc>Robot Framework library leveraging Java-agents to run [https://github.com/robotframework/SwingLibrary|SwingLibrary]
    keywords on Java-processes.

    To take the library in to use add formslibrary-[version].jar to PYTHONPATH.

    The library contains a simple socket server to communicate with Java agents. When taking the library into use,
    you can specify the port this server uses. Providing the port is optional. If you do not provide one,
    FormsLibrary will ask the OS for an unused port.

    Keywords directly offered by this library on top of SwingLibrary keywords are:
    - [#Application Started|Application Started]
    - [#Ensure Application Should Close|Ensure Application Should Close]
    - [#Log Java System Properties|Log Java System Properties]
    - [#Set Java Tool Options|Set Java Tool Options]
    - [#Start Application|Start Application]
    - [#System Exit|System Exit]
    - [#Switch To Application|Switch To Application]
    - [#Connect To Application|Connect To Application]

    FormsLibrary also introduces two global variables that can be used during testing:
    - ${REMOTESWINGLIBRARYPATH} the location of the formslibrary jar file.
    - ${REMOTESWINGLIBRARYPORT} port used by the agents to communicate with the library - this is needed if a java agent
    is started for example from another machine.

    [https://github.com/ombre42/jrobotremoteserver|jrobotremoteserver]
    that is used by FormsLibrary also offers a keyword:
    - [#Stop Remote Server|Stop Remote Server]

    Following SwingLibrary Keywords are not available through FormsLibrary:
    - Launch Application
    - SwingLibrary version of Start Application
    - Start Application In Separate Thread

    NOTE! [#Get Table Cell Property|Get Table Cell Property] will return the string representation of that property
    and not the actual object. Complex objects are not passed through Remote library interface.

    Examples:
    | * Settings * |
    | Library | FormsLibrary |
    | * Test Cases * |
    | Testing java application |
    | | Start Application | myjavaapp | java -jar myjava.jar |
    | | Select Window  | My App |
    | | Ensure Application Should Close | 60 seconds | Push Button | Exit |


    </doc>
<init>
<arguments>
<arg>port=None</arg>
<arg>aphost=127.0.0.1</arg>
<arg>apport=None</arg>
<arg>debug=False</arg>
<arg>close_security_dialogs=False</arg>
<arg>_FormsLibrary__reload=False</arg>
</arguments>
<doc>
        *port*: optional port for the server receiving connections from remote agents

        *apport*: optional port for server receiving connections of remote agent.
        Should be used if you want to reconnect to same application between robot runs.

        *aphost*: opptional network address of application we want to connect into

        *debug*: optional flag that will start agent in mode with more logging for troubleshooting (set to TRUE to enable)

        *close_security_dialogs*: optional flag for automatic security dialogs closing (set to TRUE to enable)

        NOTE! with special value 'TEST' starts a test application for documentation generation
        purposes `python -m robot.libdoc FormsLibrary::TEST FormsLibrary.html`

        NOTE! FormsLibrary is a so called Global Scope library. This means when it is imported once it will be
        available until end of robot run. If Robot encounters another import of FormsLibrary with different
        import parameters the library will be reloaded and new options will be in use. You should be careful if you
        import FormsLibrary with different options in multiple test suites and resources.</doc>
<tags>
</tags>
</init>
<kw name="Application Started">
<arguments>
<arg>alias</arg>
<arg>timeout=60</arg>
<arg>name_contains=None</arg>
</arguments>
<doc>Detects new FormsLibrary Java-agents in applications that are started without
        using the Start Application -keyword. The given alias is stored to identify the
        started application in FormsLibrary.
        Subsequent keywords will be passed on to this application.</doc>
<tags>
</tags>
</kw>
<kw name="Capture Active Window">
<arguments>
<arg>targetDirectory=</arg>
</arguments>
<doc>Take a full size screen capture of the active dialog in Oracle Forms.</doc>
<tags>
</tags>
</kw>
<kw name="Capture Window">
<arguments>
<arg>targetDirectory=</arg>
</arguments>
<doc>Take a screen capture of the Oracle Forms main window. The size of the screenshot is limited to the display resolution.</doc>
<tags>
</tags>
</kw>
<kw name="Capture Workflow View">
<arguments>
<arg>targetDirectory=</arg>
</arguments>
<doc>Take a screen capture of the Oracle Workflow view.</doc>
<tags>
</tags>
</kw>
<kw name="Click Button">
<arguments>
<arg>identifier</arg>
<arg>detectWindowChange=</arg>
</arguments>
<doc>Uses current context to search for a button by its label and when found, pushes it.

  If the button opens a new window and detectWindowChange=true, the context will be set to the new window automatically. Similarly if the button closes a window, the context will be reset to the root context. DetectWindowChange defaults to true. Example:
 | Click Button | _OK_ |</doc>
<tags>
</tags>
</kw>
<kw name="Click Button Async">
<arguments>
<arg>identifier</arg>
</arguments>
<doc>Asynchronously Pushes button</doc>
<tags>
</tags>
</kw>
<kw name="Close Open Windows">
<arguments>
</arguments>
<doc>Close all open windows except the one containing the system menu.



Example:
| Close Open Windows|</doc>
<tags>
</tags>
</kw>
<kw name="Connect To Application">
<arguments>
<arg>alias</arg>
<arg>timeout=60</arg>
<arg>name_contains=None</arg>
</arguments>
<doc>Connects to application that was started in earlier RobotFramework run.
        *apport* import option needs to be set to use this keyword.
        Application that we want to connect into needs to be started by Start Application keyword when using same *apport* value.</doc>
<tags>
</tags>
</kw>
<kw name="Deselect Checkbox">
<arguments>
<arg>identifier</arg>
</arguments>
<doc>Deselect checkbox.

Example:
| Deselect Checkbox | _checkboxname_ |</doc>
<tags>
</tags>
</kw>
<kw name="Deselect Row Checkbox">
<arguments>
<arg>index</arg>
<arg>*columnvalues</arg>
</arguments>
<doc>Deselect a checkbox in a table row. The first checkbox in a row is identified using index 1, the second one as 2, etc. The row is identified by values

Example:
| Select Row Checkbox | _checkbox index_ | _first col value_ | _second col value_ |</doc>
<tags>
</tags>
</kw>
<kw name="Enable Debug">
<arguments>
</arguments>
<doc>Enable forms library debug output.

| Enable Debug|</doc>
<tags>
</tags>
</kw>
<kw name="Ensure Application Should Close">
<arguments>
<arg>timeout</arg>
<arg>kw</arg>
<arg>*args</arg>
</arguments>
<doc> Runs the given keyword and waits until timeout for the application to close .
        If the application doesn't close, the keyword will take a screenshot and close the application
        and after that it will fail.
        In many cases calling the keyword that will close the application under test brakes the remote connection.
        This exception is ignored as it is expected by this keyword.
        Other exceptions will fail this keyword as expected.</doc>
<tags>
</tags>
</kw>
<kw name="Get Alert Message">
<arguments>
</arguments>
<doc>Get the message on an alert dialog. Example:

 | ${alertMessage}= | Get Alert Message |</doc>
<tags>
</tags>
</kw>
<kw name="Get Checkbox">
<arguments>
<arg>identifier</arg>
</arguments>
<doc>Get checkbox value (true is checked, false is unchecked)</doc>
<tags>
</tags>
</kw>
<kw name="Get Context">
<arguments>
</arguments>
<doc>Get the current context.

| Get Current Context|</doc>
<tags>
</tags>
</kw>
<kw name="Get Field">
<arguments>
<arg>identifier</arg>
</arguments>
<doc>Get field content.

Example:
| 
| ${textFieldValue}= | Get Field | _username_ |</doc>
<tags>
</tags>
</kw>
<kw name="Get Label">
<arguments>
<arg>identifier</arg>
</arguments>
<doc>Get label content.

Example:
| 
| ${textFieldValue}= | Get Field | _username_ |</doc>
<tags>
</tags>
</kw>
<kw name="Get Radio Button">
<arguments>
<arg>identifier</arg>
</arguments>
<doc>Get Radio Button selection.

Example:
| Get Radio Button | _radio option_</doc>
<tags>
</tags>
</kw>
<kw name="Get Row Checkbox">
<arguments>
<arg>index</arg>
<arg>*columnvalues</arg>
</arguments>
<doc>Get the state (true/false) of a checkbox in a table row. The first checkbox in a row is identified using index 1, the second one as 2, etc. The row is identified by values

Example:
| ${value}= | Get Row Checkbox | _checkbox index_ | _first col value_ | _second col value_ |</doc>
<tags>
</tags>
</kw>
<kw name="Get Row Field">
<arguments>
<arg>identifier</arg>
<arg>*columnvalues</arg>
</arguments>
<doc>Get a text field value in a table row. The field is identified by name. The row is identified by values

Example:
| Get Row Field | _field name_ || _first col value_ | _second col value_ |</doc>
<tags>
</tags>
</kw>
<kw name="Get Status Message">
<arguments>
</arguments>
<doc>Get the message that is displayed in the status bar at the bottom of the screen. 

 Example:
 | Get Status Message |</doc>
<tags>
</tags>
</kw>
<kw name="Get Table Fields">
<arguments>
<arg>*columnnames</arg>
</arguments>
<doc>Get all values for certain columns in a table. Returns an array[row][column]. 

 Example usage:
| @{table}= | Get Table Fields | _col1_ | _col3_ | 
| Log Many | @{Table} | | | 
| Log | ${Table[3][1]} | | |</doc>
<tags>
</tags>
</kw>
<kw name="List All Components">
<arguments>
</arguments>
<doc>Prints all components (their types and their names) available in the application window.</doc>
<tags>
</tags>
</kw>
<kw name="List All Process Activities">
<arguments>
</arguments>
<doc>List All Process Activites</doc>
<tags>
</tags>
</kw>
<kw name="List All Process Activities Info">
<arguments>
</arguments>
<doc>List All Process Activites with all properties</doc>
<tags>
</tags>
</kw>
<kw name="List All Windows">
<arguments>
</arguments>
<doc>Prints windows</doc>
<tags>
</tags>
</kw>
<kw name="List Buttons">
<arguments>
</arguments>
<doc>Prints the name of all buttons found in the selected context.

 Example:
 | List Buttons|</doc>
<tags>
</tags>
</kw>
<kw name="List Components">
<arguments>
</arguments>
<doc>Prints components (their types and their names) from the selected context.

See keywords, `Select Window`, `Select Dialog` and `Select Context` for details about context.

Example:
| Select Main Window         |
| List Fields |</doc>
<tags>
</tags>
</kw>
<kw name="List Fields">
<arguments>
</arguments>
<doc>Prints the name of all text and dropdown fields found in the selected context.

 Example:
 | List Fields|</doc>
<tags>
</tags>
</kw>
<kw name="List Window Titles">
<arguments>
</arguments>
<doc>List Window Titles.

Logs the open window titles.

Example:
| List Window Titles |</doc>
<tags>
</tags>
</kw>
<kw name="Log Java System Properties">
<arguments>
</arguments>
<doc> log and return java properties and environment information from the current java application.</doc>
<tags>
</tags>
</kw>
<kw name="Resize Window">
<arguments>
<arg>width</arg>
<arg>height</arg>
</arguments>
<doc>Set the size of the Oracle Forms main window. Maximum allowed size may be limited by the underlying OS.</doc>
<tags>
</tags>
</kw>
<kw name="Scroll Down">
<arguments>
<arg>count</arg>
<arg>index=</arg>
</arguments>
<doc>Scroll down in the current window by clicking the down arrow button on a vertical scrollbar.

 Specify how many times the button should be clicked in the count parameter. One click scrolls approximately one table row. If multiple vertical scrollbars exist in the window, you can optionnally specify the scroll bar index to indicate which scrollbar should be used. Use index 1 for the first scrollbar, 2 for the second, and so on. Example:
 | Scroll Down | _count_ ||\n | Scroll Down | _count_ | _index_ |</doc>
<tags>
</tags>
</kw>
<kw name="Scroll Left">
<arguments>
<arg>count</arg>
<arg>index=</arg>
</arguments>
<doc>Scroll left in the current window by clicking the left arrow button on a horizontal scrollbar.

 Specify how many times the button should be clicked in the count parameter. If multiple horizontal scrollbars exist in the window, you can optionnally specify the scroll bar index to indicate which scrollbar should be used. Use index 1 for the first scrollbar, 2 for the second, and so on. Example:
 | Scroll Left | _count_ ||\n | Scroll Left | _count_ | _index_ |</doc>
<tags>
</tags>
</kw>
<kw name="Scroll Right">
<arguments>
<arg>count</arg>
<arg>index=</arg>
</arguments>
<doc>Scroll right in the current window by clicking the right arrow button on a horizontal scrollbar.

 Specify how many times the button should be clicked in the count parameter. If multiple horizontal scrollbars exist in the window, you can optionnally specify the scroll bar index to indicate which scrollbar should be used. Use index 1 for the first scrollbar, 2 for the second, and so on. Example:
 | Scroll Right | _count_ ||\n | Scroll Right | _count_ | _index_ |</doc>
<tags>
</tags>
</kw>
<kw name="Scroll To Row">
<arguments>
<arg>scrollbarIndex</arg>
<arg>*columnvalues</arg>
</arguments>
<doc>Select a row in a result table by content. If the row is not visible, the down button in the scrollbar will be pressed up to 50 times in an attempt to try and locate the row. Specify the index (occurrence) of the scrollbar which should be used for scrolling.Example:
| Scroll To Row | _scrollbarIndex_ | _market_ | _gas_ |</doc>
<tags>
</tags>
</kw>
<kw name="Scroll Up">
<arguments>
<arg>count</arg>
<arg>index=</arg>
</arguments>
<doc>Scroll up in the current window by clicking the up arrow button on a vertical scrollbar.

 Specify how many times the button should be clicked in the count parameter. One click scrolls approximately one table row. If multiple vertical scrollbars exist in the window, you can optionnally specify the scroll bar index to indicate which scrollbar should be used. Use index 1 for the first scrollbar, 2 for the second, and so on. Example:
 | Scroll Up | _count_ ||\n | Scroll Up | _count_ | _index_ |</doc>
<tags>
</tags>
</kw>
<kw name="Select Base Process Activity">
<arguments>
</arguments>
<doc>Selects the base process activity.</doc>
<tags>
</tags>
</kw>
<kw name="Select Checkbox">
<arguments>
<arg>identifier</arg>
</arguments>
<doc>Select checkbox.

Example:
| Select Checkbox | _checkboxname_ |</doc>
<tags>
</tags>
</kw>
<kw name="Select Forms Dialog">
<arguments>
<arg>identifier</arg>
</arguments>
<doc>Select Forms Dialog as current context and sets focus to it. |</doc>
<tags>
</tags>
</kw>
<kw name="Select Forms Window">
<arguments>
<arg>identifier=</arg>
</arguments>
<doc>Select Window as current context and sets focus to it. if no identifier is passed the main window is selected. |</doc>
<tags>
</tags>
</kw>
<kw name="Select List Item">
<arguments>
<arg>listIdentifier</arg>
<arg>valueIdentifier</arg>
</arguments>
<doc>Select List Item .

Example:
| Select List Item | _1_ | _1_ | 
| Select List Item | _listname_ | 1 | 

| Select List Item | _listname_ | _value_ |</doc>
<tags>
</tags>
</kw>
<kw name="Select List Row">
<arguments>
<arg>*columnvalues</arg>
</arguments>
<doc>Select a row in a list view table by content.

Example:
| Select List Row | _market_ | _gas_ |</doc>
<tags>
</tags>
</kw>
<kw name="Select Menu">
<arguments>
<arg>menuPath</arg>
</arguments>
<doc>Select a window menu by its label. Use 
&gt;
 between different menu levels.

 Example:
 | Select Menu | _Help &gt; About This Application_ |</doc>
<tags>
</tags>
</kw>
<kw name="Select Process Activity">
<arguments>
<arg>id</arg>
</arguments>
<doc>Select process activity with ID from the Process flow and make it the selected activity.</doc>
<tags>
</tags>
</kw>
<kw name="Select Radio Button">
<arguments>
<arg>identifier</arg>
</arguments>
<doc>Select Radio Button.

Example:
| Select Radio Button | _radio option_</doc>
<tags>
</tags>
</kw>
<kw name="Select Row">
<arguments>
<arg>*columnvalues</arg>
</arguments>
<doc>Select a row in a result table by content.

Example:
| Select Row | _market_ | _gas_ |</doc>
<tags>
</tags>
</kw>
<kw name="Select Row Button">
<arguments>
<arg>index</arg>
<arg>*columnvalues</arg>
</arguments>
<doc>Click on a button in a table row. The first button in a row is identified using index 1, the second one as 2, etc. The row is identified by values

Example:
| Select Row Button | _button index_ | _first col value_ | _second col value_ |</doc>
<tags>
</tags>
</kw>
<kw name="Select Row Checkbox">
<arguments>
<arg>index</arg>
<arg>*columnvalues</arg>
</arguments>
<doc>Select a checkbox in a table row. The first checkbox in a row is identified using index 1, the second one as 2, etc. The row is identified by values

Example:
| Select Row Checkbox | _checkbox index_ | _first col value_ | _second col value_ |</doc>
<tags>
</tags>
</kw>
<kw name="Select Tab">
<arguments>
<arg>tabname</arg>
</arguments>
<doc>Select a tab by name.

 Example:
 | Select Tab | _name_ |</doc>
<tags>
</tags>
</kw>
<kw name="Select Tree">
<arguments>
<arg>treePath</arg>
</arguments>
<doc>Select a tree entry by its label. Use 
&gt;
 between different levels.

 Example:
| Select Tree | _root &gt; branch1 &gt; branch1.1_ |</doc>
<tags>
</tags>
</kw>
<kw name="Set Delay">
<arguments>
<arg>delay</arg>
</arguments>
<doc>Set a keyword execution delay for all formslibrary keywords.

| Set Delay | _delay in ms_ |</doc>
<tags>
</tags>
</kw>
<kw name="Set Field">
<arguments>
<arg>identifier</arg>
<arg>value</arg>
</arguments>
<doc>Locate a field by name and set it to the given value. 
:
 in the field labels are ignored.

Example:
| Set Field | _username_ | _jeff_ |</doc>
<tags>
</tags>
</kw>
<kw name="Set Field At Index">
<arguments>
<arg>columnName</arg>
<arg>rowIndex</arg>
<arg>columnValue</arg>
</arguments>
<doc>Set a field value in a table row. The column is identified by it
s name, the row is identified by the index, index starts at 1

Example:
| Set Field At Index | _column name_ | _row index_ | _value_ | 
| Set Field At Index | _ naam _ || _ 2 _ | _value_ |</doc>
<tags>
</tags>
</kw>
<kw name="Set Java Tool Options">
<arguments>
</arguments>
<doc>Sets the JAVA_TOOL_OPTIONS to include FormsLibrary Agent and
        the _JAVA_OPTIONS to set a temporary policy granting all permissions.

        FormsLibrary Agent is normally enabled by `Start Application` by
        setting the JAVA_TOOL_OPTIONS environment variable only during
        that keyword call. So java processes started by other commands wont
        normally use the FormsLibrary Agent. This keyword sets that same
        environment variable to be used always. So all java processes started
        after this will use the Agent. This methods also creates temporary
        Java policy file which grants all permissions. This file is set as
        policy for each java command call.</doc>
<tags>
</tags>
</kw>
<kw name="Set Row Field">
<arguments>
<arg>identifier</arg>
<arg>value</arg>
<arg>*columnvalues</arg>
</arguments>
<doc>Set a field value in a table row. The row is identified by values

Example:
| Set Row Field | _field name_ | _field value_ | _first col value_ | _second col value_ |</doc>
<tags>
</tags>
</kw>
<kw name="Set Window Context">
<arguments>
<arg>identifier</arg>
</arguments>
<doc>Set the context to a specific window. The window is selected by title. Use 
List Window Titles
 to view available titles if needed.



Example:
| Set Window Context | _myWindow_ |</doc>
<tags>
</tags>
</kw>
<kw name="Start Application">
<arguments>
<arg>alias</arg>
<arg>command</arg>
<arg>timeout=60</arg>
<arg>name_contains=None</arg>
</arguments>
<doc>Starts the process in the `command` parameter  on the host operating system.
        The given alias is stored to identify the started application in FormsLibrary.

        timeout (default 60) is timeout in seconds.
        name_contains is a text that must be part of the name of the java process that we are connecting to.
        name_contains helps in situations where multiple java-processes are started.
        To see the name of the connecting java agents run tests with --loglevel DEBUG.</doc>
<tags>
</tags>
</kw>
<kw name="Switch To Application">
<arguments>
<arg>alias</arg>
</arguments>
<doc>Switches between applications that are known to FormsLibrary.
        The application is identified using the alias.
        Subsequent keywords will be passed on to this application.</doc>
<tags>
</tags>
</kw>
<kw name="System Exit">
<arguments>
<arg>exit_code=1</arg>
</arguments>
<doc> Uses the FormsLibrary java agent to call system exit for the current java application.</doc>
<tags>
</tags>
</kw>
<kw name="Verify Alert Message">
<arguments>
<arg>message</arg>
</arguments>
<doc>Verify that a specific alert message is shown in a warning or error dialog.</doc>
<tags>
</tags>
</kw>
<kw name="Verify Button Is Disabled">
<arguments>
<arg>identifier</arg>
</arguments>
<doc>Verify if a button is disabled. Example:
 |  Verify Button Is Disabled | _OK_ |</doc>
<tags>
</tags>
</kw>
<kw name="Verify Button Is Enabled">
<arguments>
<arg>identifier</arg>
</arguments>
<doc>Verify if a button is enabled. Example:
 |  Verify Button Is Enabled | _OK_ |</doc>
<tags>
</tags>
</kw>
<kw name="Verify Checkbox Is Checked">
<arguments>
<arg>identifier</arg>
</arguments>
<doc>Verify checkbox is not checked.

Example:
| Verify Checkbox Is Checked | _checkboxname_ |</doc>
<tags>
</tags>
</kw>
<kw name="Verify Checkbox Is Not Checked">
<arguments>
<arg>identifier</arg>
</arguments>
<doc>Verify checkbox is checked.

Example:
| Verify Checkbox Is Not Checked | _checkboxname_ |</doc>
<tags>
</tags>
</kw>
<kw name="Verify Context">
<arguments>
</arguments>
<doc>When the application is started using Java Web Start, this can result in a newer version of the application being downloaded first, which results is an invalid context and requires an application restart.



Example:
| Verify Context|</doc>
<tags>
</tags>
</kw>
<kw name="Verify Field">
<arguments>
<arg>identifier</arg>
<arg>value</arg>
</arguments>
<doc>Verify field content. This check cannot be used for repeated table fields. For verifying a field in a table use Select Row instead.

Example:
| Field Should Contain | _username_ | _jeff_ |</doc>
<tags>
</tags>
</kw>
<kw name="Verify No Alert Is Shown">
<arguments>
</arguments>
<doc>Verify no alert dialog is shown.</doc>
<tags>
</tags>
</kw>
<kw name="Verify Status Message">
<arguments>
<arg>value</arg>
</arguments>
<doc>Verify that the status bar at the bottom of the screen contains certain content.

Example:
| Verify Status Message | _No Record Found_ |</doc>
<tags>
</tags>
</kw>
</keywordspec>
